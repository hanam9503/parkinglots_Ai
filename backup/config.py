"""
config.py - Configuration Management Module
===========================================
Ch·ª©a t·∫•t c·∫£ c√°c l·ªõp c·∫•u h√¨nh cho h·ªá th·ªëng ƒëa camera
Bao g·ªìm: CameraConfig, SystemConfig v√† c√°c utility functions
"""

from dataclasses import dataclass
from typing import Optional, List, Dict, Any
import json
import logging

logger = logging.getLogger(__name__)

@dataclass
class CameraConfig:
    """
    C·∫•u h√¨nh cho t·ª´ng camera ri√™ng l·∫ª
    
    Attributes:
        camera_id (str): ID duy nh·∫•t c·ªßa camera (t·ª± ƒë·ªông th√™m prefix CAM_ n·∫øu ch∆∞a c√≥)
        name (str): T√™n hi·ªÉn th·ªã c·ªßa camera
        stream_url (str): ƒê∆∞·ªùng d·∫´n video file ho·∫∑c RTSP stream
        location_name (str): T√™n v·ªã tr√≠ l·∫Øp ƒë·∫∑t camera
        parking_spots_file (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON ch·ª©a t·ªça ƒë·ªô c√°c √¥ ƒë·ªó xe
        
        # Th√¥ng s·ªë ph√°t hi·ªán
        vehicle_conf (float): Ng∆∞·ª°ng confidence cho vi·ªác ph√°t hi·ªán xe (0.0-1.0)
        plate_conf (float): Ng∆∞·ª°ng confidence cho vi·ªác ph√°t hi·ªán bi·ªÉn s·ªë (0.0-1.0)  
        intersection_threshold (float): Ng∆∞·ª°ng giao v·ªõi √¥ ƒë·ªó ƒë·ªÉ x√°c ƒë·ªãnh xe ƒë√£ v√†o (0.0-1.0)
        
        # Th√¥ng s·ªë x·ª≠ l√Ω
        frame_skip (int): B·ªè qua n frame ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
        yolo_img_size (int): K√≠ch th∆∞·ªõc ·∫£nh ƒë∆∞a v√†o YOLO model
        plate_img_size (int): K√≠ch th∆∞·ªõc ·∫£nh bi·ªÉn s·ªë ƒë∆∞a v√†o model
        
        # Th√¥ng s·ªë hi·ªáu su·∫•t
        enabled (bool): Camera c√≥ ƒë∆∞·ª£c k√≠ch ho·∫°t hay kh√¥ng
        priority (int): ƒê·ªô ∆∞u ti√™n (1=cao, 2=trung b√¨nh, 3=th·∫•p)
        max_fps (float): FPS t·ªëi ƒëa ƒë·ªÉ x·ª≠ l√Ω
    """
    camera_id: str
    name: str
    stream_url: str
    location_name: str
    parking_spots_file: str
    
    # Detection settings - C√†i ƒë·∫∑t ph√°t hi·ªán
    vehicle_conf: float = 0.6
    plate_conf: float = 0.4
    intersection_threshold: float = 0.3
    
    # Processing settings - C√†i ƒë·∫∑t x·ª≠ l√Ω
    frame_skip: int = 2
    yolo_img_size: int = 640
    plate_img_size: int = 416
    
    # Performance settings - C√†i ƒë·∫∑t hi·ªáu su·∫•t
    enabled: bool = True
    priority: int = 1
    max_fps: float = 10.0
    
    def __post_init__(self):
        """X·ª≠ l√Ω sau khi kh·ªüi t·∫°o - ƒë·∫£m b·∫£o camera_id c√≥ ƒë·ªãnh d·∫°ng ƒë√∫ng"""
        if not self.camera_id.startswith('CAM_'):
            self.camera_id = f"CAM_{self.camera_id}"

@dataclass
class SystemConfig:
    """
    C·∫•u h√¨nh t·ªïng th·ªÉ c·ªßa h·ªá th·ªëng
    
    Attributes:
        # K·∫øt n·ªëi server
        sync_enabled (bool): C√≥ ƒë·ªìng b·ªô v·ªõi server hay kh√¥ng
        sync_server_url (str): URL c·ªßa server ƒë·ªìng b·ªô
        connection_timeout (float): Timeout khi k·∫øt n·ªëi (seconds)
        request_timeout (float): Timeout cho m·ªói request (seconds)
        
        # T·ªëi ∆∞u hi·ªáu su·∫•t
        max_concurrent_cameras (int): S·ªë camera t·ªëi ƒëa ch·∫°y ƒë·ªìng th·ªùi
        max_workers (int): S·ªë worker threads t·ªëi ƒëa
        memory_limit_mb (int): Gi·ªõi h·∫°n RAM s·ª≠ d·ª•ng (MB)
        
        # Ch·∫ø ƒë·ªô x·ª≠ l√Ω
        save_images (bool): C√≥ l∆∞u h√¨nh ·∫£nh hay kh√¥ng
        image_quality (int): Ch·∫•t l∆∞·ª£ng ·∫£nh JPEG (1-100)
        image_cleanup_hours (int): X√≥a ·∫£nh c≈© sau n gi·ªù
        
        # C√†i ƒë·∫∑t ·ªïn ƒë·ªãnh
        min_detection_frames (int): S·ªë frame t·ªëi thi·ªÉu ƒë·ªÉ x√°c nh·∫≠n tr·∫°ng th√°i
        max_missed_frames (int): S·ªë frame miss t·ªëi ƒëa tr∆∞·ªõc khi reset
        state_timeout_minutes (int): Timeout cho tr·∫°ng th√°i √¥ ƒë·ªó (ph√∫t)
        
        # Ch·∫ø ƒë·ªô offline
        enable_offline_mode (bool): K√≠ch ho·∫°t ch·∫ø ƒë·ªô offline
        offline_queue_size (int): K√≠ch th∆∞·ªõc queue offline
        sync_interval (float): Kho·∫£ng th·ªùi gian ƒë·ªìng b·ªô (seconds)
        
        # C√†i ƒë·∫∑t giao di·ªán
        display_refresh_rate (float): T·∫ßn su·∫•t refresh display (seconds)
        status_update_interval (float): Kho·∫£ng th·ªùi gian c·∫≠p nh·∫≠t status (seconds)
    """
    # Server connection - K·∫øt n·ªëi server
    sync_enabled: bool = True
    sync_server_url: str = "http://localhost:5000"
    connection_timeout: float = 5.0
    request_timeout: float = 10.0
    
    # Performance optimization - T·ªëi ∆∞u hi·ªáu su·∫•t
    max_concurrent_cameras: int = 4
    max_workers: int = 8
    memory_limit_mb: int = 4096
    
    # Processing mode - Ch·∫ø ƒë·ªô x·ª≠ l√Ω
    save_images: bool = True
    image_quality: int = 85
    image_cleanup_hours: int = 24
    
    # Stability settings - C√†i ƒë·∫∑t ·ªïn ƒë·ªãnh
    min_detection_frames: int = 3
    max_missed_frames: int = 5
    state_timeout_minutes: int = 60
    
    # Offline mode - Ch·∫ø ƒë·ªô offline
    enable_offline_mode: bool = True
    offline_queue_size: int = 500
    sync_interval: float = 15.0
    
    # UI settings - C√†i ƒë·∫∑t giao di·ªán
    display_refresh_rate: float = 0.5
    status_update_interval: float = 2.0

# Configuration utility functions
def load_camera_configs_from_json(config_file: str) -> List[CameraConfig]:
    """
    T·∫£i c·∫•u h√¨nh camera t·ª´ file JSON
    
    Args:
        config_file (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON c·∫•u h√¨nh
        
    Returns:
        List[CameraConfig]: Danh s√°ch c·∫•u h√¨nh camera
        
    JSON Format:
    {
        "cameras": [
            {
                "camera_id": "CAM_001",
                "name": "Camera 1",
                "stream_url": "video.mp4",
                "location_name": "T·∫ßng 1",
                "parking_spots_file": "spots1.json",
                "vehicle_conf": 0.6,
                ...
            }
        ]
    }
    """
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        configs = []
        for cam_data in data.get('cameras', []):
            config = CameraConfig(
                camera_id=cam_data['camera_id'],
                name=cam_data['name'],
                stream_url=cam_data['stream_url'],
                location_name=cam_data['location_name'],
                parking_spots_file=cam_data['parking_spots_file'],
                vehicle_conf=cam_data.get('vehicle_conf', 0.6),
                plate_conf=cam_data.get('plate_conf', 0.4),
                intersection_threshold=cam_data.get('intersection_threshold', 0.3),
                frame_skip=cam_data.get('frame_skip', 2),
                yolo_img_size=cam_data.get('yolo_img_size', 640),
                priority=cam_data.get('priority', 2),
                max_fps=cam_data.get('max_fps', 10.0),
                enabled=cam_data.get('enabled', True)
            )
            configs.append(config)
        
        logger.info(f"‚úÖ Loaded {len(configs)} camera configurations from {config_file}")
        return configs
        
    except Exception as e:
        logger.error(f"‚ùå Failed to load camera configs from {config_file}: {e}")
        return []

def load_system_config_from_json(config_file: str) -> SystemConfig:
    """
    T·∫£i c·∫•u h√¨nh h·ªá th·ªëng t·ª´ file JSON
    
    Args:
        config_file (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON c·∫•u h√¨nh h·ªá th·ªëng
        
    Returns:
        SystemConfig: C·∫•u h√¨nh h·ªá th·ªëng
    """
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        config = SystemConfig(**data)
        logger.info(f"‚úÖ Loaded system configuration from {config_file}")
        return config
        
    except Exception as e:
        logger.error(f"‚ùå Failed to load system config from {config_file}: {e}")
        logger.info("üîÑ Using default system configuration")
        return SystemConfig()

def save_config_to_json(config, output_file: str):
    """
    L∆∞u c·∫•u h√¨nh ra file JSON
    
    Args:
        config: CameraConfig ho·∫∑c SystemConfig object
        output_file (str): ƒê∆∞·ªùng d·∫´n file ƒë·∫ßu ra
    """
    try:
        from dataclasses import asdict
        
        config_dict = asdict(config)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(config_dict, f, indent=2, ensure_ascii=False)
        
        logger.info(f"‚úÖ Saved configuration to {output_file}")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to save config to {output_file}: {e}")

def create_default_configs():
    """
    T·∫°o c√°c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho demo/testing
    
    Returns:
        Tuple[SystemConfig, List[CameraConfig]]: C·∫•u h√¨nh h·ªá th·ªëng v√† danh s√°ch camera
    """
    # System configuration - C·∫•u h√¨nh h·ªá th·ªëng
    system_config = SystemConfig(
        sync_enabled=True,
        sync_server_url="http://localhost:5000",
        max_concurrent_cameras=3,
        max_workers=8,
        save_images=True,
        enable_offline_mode=True
    )
    
    # Camera configurations - C·∫•u h√¨nh camera
    camera_configs = [
        CameraConfig(
            camera_id="CAM_001",
            name="T·∫ßng 1 - Khu A",
            stream_url="videos/camera1.mp4",
            location_name="T·∫ßng 1 - Khu A",
            parking_spots_file="config/camera1_spots.json",
            vehicle_conf=0.6,
            plate_conf=0.4,
            frame_skip=2,
            priority=1,  # High priority
            max_fps=15.0
        ),
        CameraConfig(
            camera_id="CAM_002", 
            name="T·∫ßng 1 - Khu B",
            stream_url="videos/camera2.mp4",
            location_name="T·∫ßng 1 - Khu B", 
            parking_spots_file="config/camera2_spots.json",
            vehicle_conf=0.6,
            plate_conf=0.4,
            frame_skip=2,
            priority=2,  # Normal priority
            max_fps=12.0
        ),
        CameraConfig(
            camera_id="CAM_003",
            name="T·∫ßng 2 - Khu A", 
            stream_url="videos/camera3.mp4",
            location_name="T·∫ßng 2 - Khu A",
            parking_spots_file="config/camera3_spots.json",
            vehicle_conf=0.5,
            plate_conf=0.4,
            frame_skip=3,
            priority=2,
            max_fps=10.0
        ),
        CameraConfig(
            camera_id="CAM_004",
            name="L·ªëi v√†o ch√≠nh",
            stream_url="videos/entrance.mp4", 
            location_name="L·ªëi v√†o ch√≠nh",
            parking_spots_file="config/entrance_spots.json",
            vehicle_conf=0.7,
            plate_conf=0.5,
            frame_skip=1,
            priority=1,  # High priority cho l·ªëi v√†o
            max_fps=20.0,
            enabled=False  # Disabled by default
        )
    ]
    
    return system_config, camera_configs

def validate_camera_config(config: CameraConfig) -> List[str]:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c·∫•u h√¨nh camera
    
    Args:
        config (CameraConfig): C·∫•u h√¨nh camera c·∫ßn ki·ªÉm tra
        
    Returns:
        List[str]: Danh s√°ch c√°c l·ªói (empty n·∫øu h·ª£p l·ªá)
    """
    errors = []
    
    # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if not config.camera_id:
        errors.append("camera_id kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    if not config.name:
        errors.append("name kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    if not config.stream_url:
        errors.append("stream_url kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    if not config.parking_spots_file:
        errors.append("parking_spots_file kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    # Ki·ªÉm tra gi√° tr·ªã s·ªë
    if not (0.0 <= config.vehicle_conf <= 1.0):
        errors.append("vehicle_conf ph·∫£i t·ª´ 0.0 ƒë·∫øn 1.0")
    
    if not (0.0 <= config.plate_conf <= 1.0):
        errors.append("plate_conf ph·∫£i t·ª´ 0.0 ƒë·∫øn 1.0")
    
    if not (0.0 <= config.intersection_threshold <= 1.0):
        errors.append("intersection_threshold ph·∫£i t·ª´ 0.0 ƒë·∫øn 1.0")
    
    if config.frame_skip < 1:
        errors.append("frame_skip ph·∫£i >= 1")
    
    if config.yolo_img_size < 32:
        errors.append("yolo_img_size ph·∫£i >= 32")
    
    if config.max_fps <= 0:
        errors.append("max_fps ph·∫£i > 0")
    
    if config.priority not in [1, 2, 3]:
        errors.append("priority ph·∫£i l√† 1, 2 ho·∫∑c 3")
    
    return errors

def validate_system_config(config: SystemConfig) -> List[str]:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c·∫•u h√¨nh h·ªá th·ªëng
    
    Args:
        config (SystemConfig): C·∫•u h√¨nh h·ªá th·ªëng c·∫ßn ki·ªÉm tra
        
    Returns:
        List[str]: Danh s√°ch c√°c l·ªói (empty n·∫øu h·ª£p l·ªá)
    """
    errors = []
    
    # Ki·ªÉm tra c√°c th√¥ng s·ªë timeout
    if config.connection_timeout <= 0:
        errors.append("connection_timeout ph·∫£i > 0")
    
    if config.request_timeout <= 0:
        errors.append("request_timeout ph·∫£i > 0")
    
    # Ki·ªÉm tra c√°c th√¥ng s·ªë hi·ªáu su·∫•t
    if config.max_concurrent_cameras < 1:
        errors.append("max_concurrent_cameras ph·∫£i >= 1")
    
    if config.max_workers < 1:
        errors.append("max_workers ph·∫£i >= 1")
    
    if config.memory_limit_mb < 512:
        errors.append("memory_limit_mb ph·∫£i >= 512")
    
    # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng ·∫£nh
    if not (1 <= config.image_quality <= 100):
        errors.append("image_quality ph·∫£i t·ª´ 1 ƒë·∫øn 100")
    
    # Ki·ªÉm tra c√°c th√¥ng s·ªë ·ªïn ƒë·ªãnh
    if config.min_detection_frames < 1:
        errors.append("min_detection_frames ph·∫£i >= 1")
    
    if config.max_missed_frames < 1:
        errors.append("max_missed_frames ph·∫£i >= 1")
    
    if config.state_timeout_minutes < 1:
        errors.append("state_timeout_minutes ph·∫£i >= 1")
    
    # Ki·ªÉm tra offline settings
    if config.offline_queue_size < 10:
        errors.append("offline_queue_size ph·∫£i >= 10")
    
    if config.sync_interval <= 0:
        errors.append("sync_interval ph·∫£i > 0")
    
    return errors