"""
server_sync.py - Server Communication Module
============================================
Qu·∫£n l√Ω giao ti·∫øp v·ªõi server backend
Bao g·ªìm: ƒë·ªìng b·ªô events, status updates, offline queue, retry logic
"""

import time
import requests
import threading
from collections import deque
from typing import Dict, Any, Optional, List
import logging
import json
from urllib3.exceptions import InsecureRequestWarning
import warnings

# Suppress SSL warnings
warnings.filterwarnings("ignore", category=InsecureRequestWarning)

logger = logging.getLogger(__name__)

class ServerSync:
    """
    L·ªõp qu·∫£n l√Ω ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi server
    
    Ch·ª©c nƒÉng ch√≠nh:
    - G·ª≠i events (enter/exit) l√™n server
    - G·ª≠i status updates cho c√°c √¥ ƒë·ªó
    - Qu·∫£n l√Ω offline queue khi m·∫•t k·∫øt n·ªëi
    - Auto retry v√† connection recovery
    - Health check ƒë·ªãnh k·ª≥
    """
    
    def __init__(self,
                 server_url: str,
                 connection_timeout: float = 5.0,
                 request_timeout: float = 10.0,
                 max_retries: int = 3,
                 offline_queue_size: int = 1000,
                 health_check_interval: float = 30.0):
        """
        Kh·ªüi t·∫°o ServerSync
        
        Args:
            server_url (str): URL c·ªßa server (v√≠ d·ª•: http://localhost:5000)
            connection_timeout (float): Timeout khi k·∫øt n·ªëi (seconds)
            request_timeout (float): Timeout cho request (seconds)
            max_retries (int): S·ªë l·∫ßn retry t·ªëi ƒëa
            offline_queue_size (int): K√≠ch th∆∞·ªõc queue offline
            health_check_interval (float): Kho·∫£ng th·ªùi gian health check (seconds)
        """
        self.server_url = server_url.rstrip('/')  # Remove trailing slash
        self.connection_timeout = connection_timeout
        self.request_timeout = request_timeout
        self.max_retries = max_retries
        self.health_check_interval = health_check_interval
        
        # HTTP Session v·ªõi timeout v√† headers m·∫∑c ƒë·ªãnh
        self.session = requests.Session()
        self.session.timeout = request_timeout
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'MultiCameraParkingSystem/1.0'
        })
        
        # Connection state
        self.is_connected = False
        self.last_health_check = 0
        self.connection_failures = 0
        
        # Offline queue - L∆∞u tr·ªØ d·ªØ li·ªáu khi offline
        self.offline_queue = deque(maxlen=offline_queue_size)
        
        # Statistics
        self.stats = {
            'events_sent': 0,
            'status_sent': 0,
            'failed_requests': 0,
            'connection_recoveries': 0,
            'queue_overflows': 0,
            'last_success': 0,
            'last_failure': 0
        }
        
        # Threading
        self.lock = threading.RLock()
        self.health_check_thread = None
        self.sync_thread = None
        self.stop_event = threading.Event()
        
        # API endpoints
        self.endpoints = {
            'health': '/api/health',
            'events': '/api/events',
            'status': '/api/status',
            'bulk_sync': '/api/bulk-sync'
        }
        
        logger.info(f"üåê ServerSync initialized for {server_url}")
        
        # Ki·ªÉm tra k·∫øt n·ªëi ban ƒë·∫ßu
        self._check_server_health()
        
        # B·∫Øt ƒë·∫ßu background threads
        self._start_background_threads()
    
    def _start_background_threads(self):
        """B·∫Øt ƒë·∫ßu c√°c background threads"""
        # Health check thread
        self.health_check_thread = threading.Thread(target=self._health_check_loop, daemon=True)
        self.health_check_thread.start()
        
        # Sync thread cho offline queue
        self.sync_thread = threading.Thread(target=self._sync_offline_queue_loop, daemon=True)
        self.sync_thread.start()
        
        logger.info("üîÑ Started background sync threads")
    
    def _health_check_loop(self):
        """Background loop cho health check"""
        while not self.stop_event.is_set():
            try:
                current_time = time.time()
                
                # Ch·ªâ check n·∫øu ƒë√£ qua health_check_interval
                if current_time - self.last_health_check >= self.health_check_interval:
                    self._check_server_health()
                
                # Ng·ªß 1 gi√¢y tr∆∞·ªõc khi check l·∫°i
                self.stop_event.wait(1.0)
                
            except Exception as e:
                logger.error(f"‚ùå Health check loop error: {e}")
                self.stop_event.wait(5.0)
    
    def _sync_offline_queue_loop(self):
        """Background loop ƒë·ªÉ sync offline queue"""
        while not self.stop_event.is_set():
            try:
                # Ch·ªâ sync khi c√≥ k·∫øt n·ªëi v√† c√≥ data trong queue
                if self.is_connected and self.offline_queue:
                    self._sync_offline_data()
                
                # Ng·ªß 5 gi√¢y tr∆∞·ªõc khi check l·∫°i
                self.stop_event.wait(5.0)
                
            except Exception as e:
                logger.error(f"‚ùå Offline sync loop error: {e}")
                self.stop_event.wait(10.0)
    
    def _check_server_health(self) -> bool:
        """
        Ki·ªÉm tra health c·ªßa server
        
        Returns:
            bool: True n·∫øu server healthy
        """
        try:
            response = self.session.get(
                f"{self.server_url}{self.endpoints['health']}",
                timeout=self.connection_timeout
            )
            
            was_connected = self.is_connected
            self.is_connected = response.status_code == 200
            self.last_health_check = time.time()
            
            if self.is_connected:
                self.connection_failures = 0
                if not was_connected:
                    # Connection recovered
                    self.stats['connection_recoveries'] += 1
                    logger.info(f"‚úÖ Connected to server: {self.server_url}")
            else:
                self.connection_failures += 1
                if was_connected:
                    logger.warning(f"‚ö†Ô∏è Server returned status {response.status_code}")
            
            return self.is_connected
            
        except Exception as e:
            was_connected = self.is_connected
            self.is_connected = False
            self.connection_failures += 1
            self.last_health_check = time.time()
            
            if was_connected:
                logger.warning(f"‚ö†Ô∏è Lost connection to server: {e}")
            
            return False
    
    def send_event(self, event_data: Dict[str, Any]) -> bool:
        """
        G·ª≠i parking event l√™n server
        
        Args:
            event_data (Dict): D·ªØ li·ªáu event
                {
                    'id': str,
                    'camera_id': str,
                    'spot_id': str,
                    'event_type': 'enter' | 'exit',
                    'timestamp': str,
                    'plate_text': str,
                    'location_name': str,
                    ...
                }
                
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        return self._send_data('events', event_data, 'event')
    
    def send_status(self, status_data: Dict[str, Any]) -> bool:
        """
        G·ª≠i status update l√™n server
        
        Args:
            status_data (Dict): D·ªØ li·ªáu status
                {
                    'spot_id': str,
                    'camera_id': str,
                    'is_occupied': bool,
                    'plate_text': str,
                    'last_update': str,
                    ...
                }
                
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        return self._send_data('status', status_data, 'status')
    
    def _send_data(self, endpoint_key: str, data: Dict[str, Any], data_type: str) -> bool:
        """
        G·ª≠i d·ªØ li·ªáu l√™n server (internal method)
        
        Args:
            endpoint_key (str): Key c·ªßa endpoint trong self.endpoints
            data (Dict): D·ªØ li·ªáu c·∫ßn g·ª≠i
            data_type (str): Lo·∫°i d·ªØ li·ªáu ('event' ho·∫∑c 'status')
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        with self.lock:
            # Ki·ªÉm tra k·∫øt n·ªëi n·∫øu c·∫ßn
            if not self.is_connected:
                self._check_server_health()
            
            # N·∫øu v·∫´n kh√¥ng c√≥ k·∫øt n·ªëi, th√™m v√†o offline queue
            if not self.is_connected:
                return self._add_to_offline_queue(endpoint_key, data, data_type)
            
            # Th·ª≠ g·ª≠i d·ªØ li·ªáu
            for attempt in range(self.max_retries):
                try:
                    response = self.session.post(
                        f"{self.server_url}{self.endpoints[endpoint_key]}",
                        json=data,
                        timeout=self.request_timeout
                    )
                    
                    if response.status_code in [200, 201]:
                        # Th√†nh c√¥ng
                        if data_type == 'event':
                            self.stats['events_sent'] += 1
                        elif data_type == 'status':
                            self.stats['status_sent'] += 1
                        
                        self.stats['last_success'] = time.time()
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è Server returned {response.status_code} for {data_type}")
                        
                except requests.exceptions.Timeout:
                    logger.warning(f"‚è∞ Timeout sending {data_type} (attempt {attempt + 1})")
                    continue
                    
                except Exception as e:
                    logger.warning(f"‚ùå Error sending {data_type} (attempt {attempt + 1}): {e}")
                    if attempt < self.max_retries - 1:
                        time.sleep(0.5 * (attempt + 1))  # Exponential backoff
                    continue
            
            # T·∫•t c·∫£ attempts th·∫•t b·∫°i
            self.is_connected = False
            self.stats['failed_requests'] += 1
            self.stats['last_failure'] = time.time()
            
            # Th√™m v√†o offline queue
            return self._add_to_offline_queue(endpoint_key, data, data_type)
    
    def _add_to_offline_queue(self, endpoint_key: str, data: Dict[str, Any], data_type: str) -> bool:
        """
        Th√™m d·ªØ li·ªáu v√†o offline queue
        
        Args:
            endpoint_key (str): Endpoint key
            data (Dict): D·ªØ li·ªáu
            data_type (str): Lo·∫°i d·ªØ li·ªáu
            
        Returns:
            bool: False (v√¨ kh√¥ng g·ª≠i ƒë∆∞·ª£c ngay)
        """
        queue_item = {
            'endpoint': endpoint_key,
            'data': data,
            'type': data_type,
            'timestamp': time.time(),
            'attempts': 0
        }
        
        try:
            self.offline_queue.append(queue_item)
        except:
            # Queue ƒë·∫ßy, item c≈© nh·∫•t s·∫Ω b·ªã lo·∫°i b·ªè
            self.stats['queue_overflows'] += 1
            self.offline_queue.append(queue_item)
        
        return False
    
    def _sync_offline_data(self):
        """ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª´ offline queue"""
        if not self.offline_queue:
            return
        
        synced_count = 0
        failed_items = []
        
        # Process t·ªëi ƒëa 10 items m·ªói l·∫ßn ƒë·ªÉ tr√°nh block
        batch_size = min(10, len(self.offline_queue))
        
        for _ in range(batch_size):
            try:
                item = self.offline_queue.popleft()
            except IndexError:
                break
            
            item['attempts'] += 1
            
            try:
                response = self.session.post(
                    f"{self.server_url}{self.endpoints[item['endpoint']]}",
                    json=item['data'],
                    timeout=self.request_timeout
                )
                
                if response.status_code in [200, 201]:
                    # Th√†nh c√¥ng
                    synced_count += 1
                    
                    if item['type'] == 'event':
                        self.stats['events_sent'] += 1
                    elif item['type'] == 'status':
                        self.stats['status_sent'] += 1
                else:
                    # Th·∫•t b·∫°i, retry n·∫øu ch∆∞a qu√° max attempts
                    if item['attempts'] < self.max_retries:
                        failed_items.append(item)
                
            except Exception as e:
                # L·ªói network, retry n·∫øu ch∆∞a qu√° max attempts
                if item['attempts'] < self.max_retries:
                    failed_items.append(item)
                else:
                    logger.warning(f"‚ùå Dropped offline item after {item['attempts']} attempts: {e}")
        
        # ƒê∆∞a c√°c failed items tr·ªü l·∫°i queue
        for item in failed_items:
            try:
                self.offline_queue.appendleft(item)
            except:
                # Queue ƒë·∫ßy
                self.stats['queue_overflows'] += 1
        
        if synced_count > 0:
            logger.info(f"üì° Synced {synced_count} offline items to server")
    
    def get_connection_status(self) -> Dict[str, Any]:
        """
        L·∫•y tr·∫°ng th√°i k·∫øt n·ªëi v√† th·ªëng k√™
        
        Returns:
            Dict: Th√¥ng tin chi ti·∫øt v·ªÅ k·∫øt n·ªëi
                {
                    'is_connected': bool,
                    'server_url': str,
                    'offline_queue_size': int,
                    'connection_failures': int,
                    'stats': dict,
                    'last_health_check': float
                }
        """
        with self.lock:
            return {
                'is_connected': self.is_connected,
                'server_url': self.server_url,
                'offline_queue_size': len(self.offline_queue),
                'connection_failures': self.connection_failures,
                'stats': self.stats.copy(),
                'last_health_check': self.last_health_check,
                'health_check_interval': self.health_check_interval
            }
    
    def force_sync_offline_queue(self) -> int:
        """
        √âp bu·ªôc sync to√†n b·ªô offline queue ngay l·∫≠p t·ª©c
        
        Returns:
            int: S·ªë items ƒë√£ ƒë∆∞·ª£c sync th√†nh c√¥ng
        """
        if not self.is_connected:
            logger.warning("‚ö†Ô∏è Cannot force sync: not connected to server")
            return 0
        
        logger.info(f"üîÑ Force syncing {len(self.offline_queue)} offline items")
        
        original_size = len(self.offline_queue)
        
        while self.offline_queue and self.is_connected:
            self._sync_offline_data()
            time.sleep(0.1)  # Small delay ƒë·ªÉ tr√°nh overwhelm server
        
        synced_count = original_size - len(self.offline_queue)
        logger.info(f"‚úÖ Force sync completed: {synced_count}/{original_size} items synced")
        
        return synced_count
    
    def clear_offline_queue(self):
        """X√≥a to√†n b·ªô offline queue"""
        with self.lock:
            queue_size = len(self.offline_queue)
            self.offline_queue.clear()
            logger.info(f"üóëÔ∏è Cleared {queue_size} items from offline queue")
    
    def update_server_url(self, new_url: str):
        """
        C·∫≠p nh·∫≠t server URL
        
        Args:
            new_url (str): URL m·ªõi
        """
        with self.lock:
            old_url = self.server_url
            self.server_url = new_url.rstrip('/')
            self.is_connected = False
            
            logger.info(f"üîß Updated server URL: {old_url} -> {self.server_url}")
            
            # Ki·ªÉm tra k·∫øt n·ªëi v·ªõi URL m·ªõi
            self._check_server_health()
    
    def test_connection(self) -> Dict[str, Any]:
        """
        Test k·∫øt n·ªëi ƒë·∫øn server v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt
        
        Returns:
            Dict: K·∫øt qu·∫£ test
                {
                    'success': bool,
                    'response_time_ms': float,
                    'status_code': int,
                    'error': str (n·∫øu c√≥)
                }
        """
        start_time = time.time()
        
        try:
            response = self.session.get(
                f"{self.server_url}{self.endpoints['health']}",
                timeout=self.connection_timeout
            )
            
            response_time = (time.time() - start_time) * 1000  # Convert to ms
            
            return {
                'success': response.status_code == 200,
                'response_time_ms': round(response_time, 2),
                'status_code': response.status_code,
                'server_url': self.server_url
            }
            
        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            
            return {
                'success': False,
                'response_time_ms': round(response_time, 2),
                'status_code': 0,
                'error': str(e),
                'server_url': self.server_url
            }
    
    def cleanup(self):
        """D·ªçn d·∫πp resources v√† stop threads"""
        logger.info("üßπ Starting ServerSync cleanup...")
        
        # Signal threads to stop
        self.stop_event.set()
        
        # Wait for threads to finish
        if self.health_check_thread and self.health_check_thread.is_alive():
            self.health_check_thread.join(timeout=5)
        
        if self.sync_thread and self.sync_thread.is_alive():
            self.sync_thread.join(timeout=5)
        
        # Try to sync remaining offline data
        if self.offline_queue and self.is_connected:
            logger.info(f"üì° Syncing {len(self.offline_queue)} remaining items before cleanup")
            self.force_sync_offline_queue()
        
        # Close session
        try:
            self.session.close()
        except:
            pass
        
        logger.info("‚úÖ ServerSync cleanup completed")

# Utility functions for testing and configuration

def test_server_connection(server_url: str, timeout: float = 5.0) -> Dict[str, Any]:
    """
    Utility function ƒë·ªÉ test k·∫øt n·ªëi server kh√¥ng c·∫ßn t·∫°o ServerSync instance
    
    Args:
        server_url (str): URL server c·∫ßn test
        timeout (float): Timeout cho test
        
    Returns:
        Dict: K·∫øt qu·∫£ test
    """
    start_time = time.time()
    
    try:
        response = requests.get(
            f"{server_url.rstrip('/')}/api/health",
            timeout=timeout
        )
        
        response_time = (time.time() - start_time) * 1000
        
        return {
            'success': response.status_code == 200,
            'response_time_ms': round(response_time, 2),
            'status_code': response.status_code,
            'server_url': server_url
        }
        
    except Exception as e:
        response_time = (time.time() - start_time) * 1000
        
        return {
            'success': False,
            'response_time_ms': round(response_time, 2),
            'status_code': 0,
            'error': str(e),
            'server_url': server_url
        }